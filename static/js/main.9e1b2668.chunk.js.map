{"version":3,"sources":["Components/ListItem.js","Components/List.js","Components/Header.js","Components/HOC.js","Components/EmployeeInfo.js","Components/Loading.js","Components/App.js","serviceWorker.js","index.js"],"names":["ListItem","props","firstName","lastName","profileImage","onClick","id","className","src","alt","List","employees","employeeList","map","employee","index","key","Header","requiresBackButton","onBackClick","title","style","marginLeft","WithBackButton","Component","otherProps","EnhancedHeader","EmployeeInfo","this","currentEmployee","email","phone","address","state","country","React","Loading","class","role","App","showEmployeeInfo","setState","isListDisplayed","currentID","fetch","then","response","json","result","slice","list","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9e1b2668.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst ListItem = props => {\r\n\r\n   const {firstName, lastName, profileImage, onClick, id} = props;\r\n    return (\r\n        <div className=\"list-item\" onClick={() => onClick(id)}>\r\n            <img src={profileImage} alt=\"employee\"></img>\r\n            <span>{firstName} {lastName}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\n\r\nimport ListItem from './ListItem';\r\n\r\nconst List = props => {\r\n\r\n    const {employees, onClick} = props;\r\n    const employeeList = employees.map((employee, index) => {\r\n        return <ListItem \r\n                firstName={employee.firstName} \r\n                lastName={employee.lastName} \r\n                profileImage={employee.profileImage} \r\n                key={employee.id}\r\n                id={employee.id}\r\n                onClick={onClick}/>\r\n    })\r\n    return (\r\n        <div className=\"list-container\">\r\n            {employeeList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List;","import React from 'react'\r\n\r\nconst Header = (props) => {\r\n    const {requiresBackButton, onBackClick, title} = props; \r\n    return (\r\n        <div className=\"header\">\r\n            {\r\n              requiresBackButton ? <button onClick={()=>onBackClick()}>Back</button>:''\r\n            }\r\n            <span \r\n                style={{\r\n                marginLeft: props.marginLeft,\r\n            }}>\r\n                {title}\r\n            </span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst WithBackButton = Component => {\r\n    return function(props){\r\n        const { onBackClick, requiresBackButton, ...otherProps } = props;\r\n        if(requiresBackButton){\r\n            return (\r\n                <Component {...otherProps}  requiresBackButton={requiresBackButton} onBackClick={onBackClick} />\r\n            )\r\n        }\r\n        return (\r\n            <Component {...otherProps} requiresBackButton={requiresBackButton} marginLeft=\"582px\"/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default WithBackButton;","import React from 'react';\r\n\r\nimport Header from './Header';\r\nimport WithBackButton from './HOC';\r\n\r\n\r\nconst EnhancedHeader = WithBackButton(Header);\r\n\r\n\r\nclass EmployeeInfo extends React.Component {   \r\n\r\n    render(){\r\n        return (\r\n            <div>\r\n                <EnhancedHeader onBackClick={this.props.onBackClick} requiresBackButton={true} title=\"Employee Info\"/>\r\n                <div className=\"info-container\">\r\n                    <div className=\"image-holder\">\r\n                        <img src={this.props.currentEmployee.profileImage} alt=\"display-profile\"/>\r\n                    </div>\r\n                    <div className=\"info-holder\">\r\n                        <div className=\"first-name\">\r\n                            Name : <span>{this.props.currentEmployee.firstName} {this.props.currentEmployee.lastName}</span>\r\n                        </div>\r\n                        <div className=\"email\">\r\n                            Email : <span>{this.props.currentEmployee.email} </span>\r\n                        </div>\r\n                        <div className=\"phone\">\r\n                            Phone : <span>{this.props.currentEmployee.phone}</span> \r\n                        </div>\r\n                        <div className=\"address\">\r\n                             Address : <span>{this.props.currentEmployee.address.state} , {this.props.currentEmployee.address.country}</span> \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default EmployeeInfo;","import React from 'react'\r\n\r\nconst Loading = () => {\r\n    return (\r\n        <div class=\"d-flex justify-content-center\">\r\n         <div class=\"spinner-border\" role=\"status\">\r\n            <span class=\"sr-only\">Loading...</span>\r\n         </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loading;","import React from 'react';\nimport '../Styles/App.css';\n\nimport List from './List';\nimport EmployeeInfo from './EmployeeInfo';\nimport Header from './Header';\nimport Loading from './Loading';\n\nimport WithBackButton from './HOC.js';\n\nconst EnhancedHeader = WithBackButton(Header);\n\nclass App extends React.Component {\n  \n  constructor(){\n    super();\n\n    this.state = {\n        employees : [],\n        isListDisplayed : true,\n        currentID: 0 \n    }\n  }\n\n  componentDidMount(){\n    fetch('https://mock-io.herokuapp.com/users')\n    .then(response => response.json())\n    .then(result => result.slice(0,20))\n    .then(list => this.setState({\n      employees: list\n    }))\n  }\n\n  showEmployeeInfo = (id) => {\n    this.setState({\n      isListDisplayed: !this.state.isListDisplayed ,\n      currentID : id - 1\n    })\n  }\n\n  onBackClick = () => {\n    this.setState({\n      isListDisplayed: !this.state.isListDisplayed\n    })\n  }\n\n  render(){\n    return (\n      <div className=\"App\">\n          {\n            this.state.isListDisplayed ? <EnhancedHeader requiresBackButton={false} title=\"Employee List\" /> : ''\n          }\n          { \n            this.state.isListDisplayed ? \n              !this.state.employees.length ? <Loading /> : <List employees={this.state.employees} onClick={this.showEmployeeInfo}/> : \n              <EmployeeInfo currentEmployee={this.state.employees[this.state.currentID]} onBackClick={this.onBackClick}/>\n          }\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}